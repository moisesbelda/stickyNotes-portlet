/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stickynotes.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stickynotes.model.stickyNote;
import com.stickynotes.model.stickyNoteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the stickyNote service. Represents a row in the &quot;stickynotes_stickyNote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stickynotes.model.stickyNoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link stickyNoteImpl}.
 * </p>
 *
 * @author mbelda
 * @see stickyNoteImpl
 * @see com.stickynotes.model.stickyNote
 * @see com.stickynotes.model.stickyNoteModel
 * @generated
 */
public class stickyNoteModelImpl extends BaseModelImpl<stickyNote>
	implements stickyNoteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sticky note model instance should use the {@link com.stickynotes.model.stickyNote} interface instead.
	 */
	public static final String TABLE_NAME = "stickynotes_stickyNote";
	public static final Object[][] TABLE_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "plid", Types.BIGINT },
			{ "stickyNoteId", Types.BIGINT },
			{ "text_", Types.VARCHAR },
			{ "positionX", Types.DOUBLE },
			{ "positionY", Types.DOUBLE },
			{ "positionZ", Types.BIGINT },
			{ "color", Types.VARCHAR },
			{ "dateCreated", Types.TIMESTAMP },
			{ "dateModified", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table stickynotes_stickyNote (companyId LONG,groupId LONG,userId LONG,plid LONG,stickyNoteId LONG not null primary key,text_ VARCHAR(100) null,positionX DOUBLE,positionY DOUBLE,positionZ LONG,color VARCHAR(75) null,dateCreated DATE null,dateModified DATE null)";
	public static final String TABLE_SQL_DROP = "drop table stickynotes_stickyNote";
	public static final String ORDER_BY_JPQL = " ORDER BY stickyNote.dateCreated ASC";
	public static final String ORDER_BY_SQL = " ORDER BY stickynotes_stickyNote.dateCreated ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.stickynotes.model.stickyNote"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.stickynotes.model.stickyNote"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.stickynotes.model.stickyNote"));

	public stickyNoteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stickyNoteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStickyNoteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stickyNoteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return stickyNote.class;
	}

	@Override
	public String getModelClassName() {
		return stickyNote.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("plid", getPlid());
		attributes.put("stickyNoteId", getStickyNoteId());
		attributes.put("text", getText());
		attributes.put("positionX", getPositionX());
		attributes.put("positionY", getPositionY());
		attributes.put("positionZ", getPositionZ());
		attributes.put("color", getColor());
		attributes.put("dateCreated", getDateCreated());
		attributes.put("dateModified", getDateModified());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long plid = (Long)attributes.get("plid");

		if (plid != null) {
			setPlid(plid);
		}

		Long stickyNoteId = (Long)attributes.get("stickyNoteId");

		if (stickyNoteId != null) {
			setStickyNoteId(stickyNoteId);
		}

		String text = (String)attributes.get("text");

		if (text != null) {
			setText(text);
		}

		Double positionX = (Double)attributes.get("positionX");

		if (positionX != null) {
			setPositionX(positionX);
		}

		Double positionY = (Double)attributes.get("positionY");

		if (positionY != null) {
			setPositionY(positionY);
		}

		Long positionZ = (Long)attributes.get("positionZ");

		if (positionZ != null) {
			setPositionZ(positionZ);
		}

		String color = (String)attributes.get("color");

		if (color != null) {
			setColor(color);
		}

		Date dateCreated = (Date)attributes.get("dateCreated");

		if (dateCreated != null) {
			setDateCreated(dateCreated);
		}

		Date dateModified = (Date)attributes.get("dateModified");

		if (dateModified != null) {
			setDateModified(dateModified);
		}
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getPlid() {
		return _plid;
	}

	@Override
	public void setPlid(long plid) {
		_plid = plid;
	}

	@Override
	public long getStickyNoteId() {
		return _stickyNoteId;
	}

	@Override
	public void setStickyNoteId(long stickyNoteId) {
		_stickyNoteId = stickyNoteId;
	}

	@Override
	public String getText() {
		if (_text == null) {
			return StringPool.BLANK;
		}
		else {
			return _text;
		}
	}

	@Override
	public void setText(String text) {
		_text = text;
	}

	@Override
	public double getPositionX() {
		return _positionX;
	}

	@Override
	public void setPositionX(double positionX) {
		_positionX = positionX;
	}

	@Override
	public double getPositionY() {
		return _positionY;
	}

	@Override
	public void setPositionY(double positionY) {
		_positionY = positionY;
	}

	@Override
	public long getPositionZ() {
		return _positionZ;
	}

	@Override
	public void setPositionZ(long positionZ) {
		_positionZ = positionZ;
	}

	@Override
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		_color = color;
	}

	@Override
	public Date getDateCreated() {
		return _dateCreated;
	}

	@Override
	public void setDateCreated(Date dateCreated) {
		_dateCreated = dateCreated;
	}

	@Override
	public Date getDateModified() {
		return _dateModified;
	}

	@Override
	public void setDateModified(Date dateModified) {
		_dateModified = dateModified;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			stickyNote.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public stickyNote toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (stickyNote)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		stickyNoteImpl stickyNoteImpl = new stickyNoteImpl();

		stickyNoteImpl.setCompanyId(getCompanyId());
		stickyNoteImpl.setGroupId(getGroupId());
		stickyNoteImpl.setUserId(getUserId());
		stickyNoteImpl.setPlid(getPlid());
		stickyNoteImpl.setStickyNoteId(getStickyNoteId());
		stickyNoteImpl.setText(getText());
		stickyNoteImpl.setPositionX(getPositionX());
		stickyNoteImpl.setPositionY(getPositionY());
		stickyNoteImpl.setPositionZ(getPositionZ());
		stickyNoteImpl.setColor(getColor());
		stickyNoteImpl.setDateCreated(getDateCreated());
		stickyNoteImpl.setDateModified(getDateModified());

		stickyNoteImpl.resetOriginalValues();

		return stickyNoteImpl;
	}

	@Override
	public int compareTo(stickyNote stickyNote) {
		int value = 0;

		value = DateUtil.compareTo(getDateCreated(), stickyNote.getDateCreated());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof stickyNote)) {
			return false;
		}

		stickyNote stickyNote = (stickyNote)obj;

		long primaryKey = stickyNote.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<stickyNote> toCacheModel() {
		stickyNoteCacheModel stickyNoteCacheModel = new stickyNoteCacheModel();

		stickyNoteCacheModel.companyId = getCompanyId();

		stickyNoteCacheModel.groupId = getGroupId();

		stickyNoteCacheModel.userId = getUserId();

		stickyNoteCacheModel.plid = getPlid();

		stickyNoteCacheModel.stickyNoteId = getStickyNoteId();

		stickyNoteCacheModel.text = getText();

		String text = stickyNoteCacheModel.text;

		if ((text != null) && (text.length() == 0)) {
			stickyNoteCacheModel.text = null;
		}

		stickyNoteCacheModel.positionX = getPositionX();

		stickyNoteCacheModel.positionY = getPositionY();

		stickyNoteCacheModel.positionZ = getPositionZ();

		stickyNoteCacheModel.color = getColor();

		String color = stickyNoteCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			stickyNoteCacheModel.color = null;
		}

		Date dateCreated = getDateCreated();

		if (dateCreated != null) {
			stickyNoteCacheModel.dateCreated = dateCreated.getTime();
		}
		else {
			stickyNoteCacheModel.dateCreated = Long.MIN_VALUE;
		}

		Date dateModified = getDateModified();

		if (dateModified != null) {
			stickyNoteCacheModel.dateModified = dateModified.getTime();
		}
		else {
			stickyNoteCacheModel.dateModified = Long.MIN_VALUE;
		}

		return stickyNoteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", plid=");
		sb.append(getPlid());
		sb.append(", stickyNoteId=");
		sb.append(getStickyNoteId());
		sb.append(", text=");
		sb.append(getText());
		sb.append(", positionX=");
		sb.append(getPositionX());
		sb.append(", positionY=");
		sb.append(getPositionY());
		sb.append(", positionZ=");
		sb.append(getPositionZ());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", dateCreated=");
		sb.append(getDateCreated());
		sb.append(", dateModified=");
		sb.append(getDateModified());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.stickynotes.model.stickyNote");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>plid</column-name><column-value><![CDATA[");
		sb.append(getPlid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stickyNoteId</column-name><column-value><![CDATA[");
		sb.append(getStickyNoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>text</column-name><column-value><![CDATA[");
		sb.append(getText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionX</column-name><column-value><![CDATA[");
		sb.append(getPositionX());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionY</column-name><column-value><![CDATA[");
		sb.append(getPositionY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionZ</column-name><column-value><![CDATA[");
		sb.append(getPositionZ());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateCreated</column-name><column-value><![CDATA[");
		sb.append(getDateCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateModified</column-name><column-value><![CDATA[");
		sb.append(getDateModified());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = stickyNote.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			stickyNote.class
		};
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _plid;
	private long _stickyNoteId;
	private String _text;
	private double _positionX;
	private double _positionY;
	private long _positionZ;
	private String _color;
	private Date _dateCreated;
	private Date _dateModified;
	private stickyNote _escapedModel;
}